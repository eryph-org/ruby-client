=begin
#Compute Api

#Compute Api

The version of the OpenAPI document: 1.0
Contact: support@dbosoft.eu
Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module ComputeClient
  class VirtualDisk
    attr_accessor :id

    attr_accessor :name

    attr_accessor :location

    attr_accessor :data_store

    attr_accessor :project

    attr_accessor :environment

    attr_accessor :status

    attr_accessor :gene

    # The file system path of the virtual disk. This information  is only available to administrators.
    attr_accessor :path

    attr_accessor :size_bytes

    # The ID of the parent disk when this disk is a differential disk.
    attr_accessor :parent_id

    # The file system path of the virtual disk's parent. This information  is only available to administrators. The ParentPath might be populated  even if the ParentId is missing. In this case, the disk chain is corrupted.
    attr_accessor :parent_path

    attr_accessor :attached_catlets

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'location' => :'location',
        :'data_store' => :'data_store',
        :'project' => :'project',
        :'environment' => :'environment',
        :'status' => :'status',
        :'gene' => :'gene',
        :'path' => :'path',
        :'size_bytes' => :'size_bytes',
        :'parent_id' => :'parent_id',
        :'parent_path' => :'parent_path',
        :'attached_catlets' => :'attached_catlets'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'location' => :'String',
        :'data_store' => :'String',
        :'project' => :'Project',
        :'environment' => :'String',
        :'status' => :'DiskStatus',
        :'gene' => :'VirtualDiskGeneInfo',
        :'path' => :'String',
        :'size_bytes' => :'Integer',
        :'parent_id' => :'String',
        :'parent_path' => :'String',
        :'attached_catlets' => :'Array<VirtualDiskAttachedCatlet>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'path',
        :'size_bytes',
        :'parent_id',
        :'parent_path',
        :'attached_catlets'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ComputeClient::VirtualDisk` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ComputeClient::VirtualDisk`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      else
        self.location = nil
      end

      if attributes.key?(:'data_store')
        self.data_store = attributes[:'data_store']
      else
        self.data_store = nil
      end

      if attributes.key?(:'project')
        self.project = attributes[:'project']
      else
        self.project = nil
      end

      if attributes.key?(:'environment')
        self.environment = attributes[:'environment']
      else
        self.environment = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'gene')
        self.gene = attributes[:'gene']
      end

      if attributes.key?(:'path')
        self.path = attributes[:'path']
      end

      if attributes.key?(:'size_bytes')
        self.size_bytes = attributes[:'size_bytes']
      end

      if attributes.key?(:'parent_id')
        self.parent_id = attributes[:'parent_id']
      end

      if attributes.key?(:'parent_path')
        self.parent_path = attributes[:'parent_path']
      end

      if attributes.key?(:'attached_catlets')
        if (value = attributes[:'attached_catlets']).is_a?(Array)
          self.attached_catlets = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @location.nil?
        invalid_properties.push('invalid value for "location", location cannot be nil.')
      end

      if @data_store.nil?
        invalid_properties.push('invalid value for "data_store", data_store cannot be nil.')
      end

      if @project.nil?
        invalid_properties.push('invalid value for "project", project cannot be nil.')
      end

      if @environment.nil?
        invalid_properties.push('invalid value for "environment", environment cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @name.nil?
      return false if @location.nil?
      return false if @data_store.nil?
      return false if @project.nil?
      return false if @environment.nil?
      return false if @status.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] location Value to be assigned
    def location=(location)
      if location.nil?
        fail ArgumentError, 'location cannot be nil'
      end

      @location = location
    end

    # Custom attribute writer method with validation
    # @param [Object] data_store Value to be assigned
    def data_store=(data_store)
      if data_store.nil?
        fail ArgumentError, 'data_store cannot be nil'
      end

      @data_store = data_store
    end

    # Custom attribute writer method with validation
    # @param [Object] project Value to be assigned
    def project=(project)
      if project.nil?
        fail ArgumentError, 'project cannot be nil'
      end

      @project = project
    end

    # Custom attribute writer method with validation
    # @param [Object] environment Value to be assigned
    def environment=(environment)
      if environment.nil?
        fail ArgumentError, 'environment cannot be nil'
      end

      @environment = environment
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if status.nil?
        fail ArgumentError, 'status cannot be nil'
      end

      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          location == o.location &&
          data_store == o.data_store &&
          project == o.project &&
          environment == o.environment &&
          status == o.status &&
          gene == o.gene &&
          path == o.path &&
          size_bytes == o.size_bytes &&
          parent_id == o.parent_id &&
          parent_path == o.parent_path &&
          attached_catlets == o.attached_catlets
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, location, data_store, project, environment, status, gene, path, size_bytes, parent_id, parent_path, attached_catlets].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ComputeClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
