=begin
#Compute Api

#Compute Api

The version of the OpenAPI document: 1.0
Contact: support@dbosoft.eu
Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module ComputeClient
  class CatletsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new catlet
    # Create a catlet
    # @param [Hash] opts the optional parameters
    # @option opts [NewCatletRequest] :new_catlet_request 
    # @return [Operation]
    def catlets_create(opts = {})
      data, _status_code, _headers = catlets_create_with_http_info(opts)
      data
    end

    # Create a new catlet
    # Create a catlet
    # @param [Hash] opts the optional parameters
    # @option opts [NewCatletRequest] :new_catlet_request 
    # @return [Array<(Operation, Integer, Hash)>] Operation data, response status code and response headers
    def catlets_create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatletsApi.catlets_create ...'
      end
      # resource path
      local_var_path = '/v1/catlets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'new_catlet_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Operation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CatletsApi.catlets_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatletsApi#catlets_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a catlet
    # Deletes a catlet
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Operation]
    def catlets_delete(id, opts = {})
      data, _status_code, _headers = catlets_delete_with_http_info(id, opts)
      data
    end

    # Delete a catlet
    # Deletes a catlet
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Operation, Integer, Hash)>] Operation data, response status code and response headers
    def catlets_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatletsApi.catlets_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CatletsApi.catlets_delete"
      end
      # resource path
      local_var_path = '/v1/catlets/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Operation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CatletsApi.catlets_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatletsApi#catlets_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Expand catlet config
    # Expand the config for an existing catlet
    # @param id [String] 
    # @param expand_catlet_config_request_body [ExpandCatletConfigRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Operation]
    def catlets_expand_config(id, expand_catlet_config_request_body, opts = {})
      data, _status_code, _headers = catlets_expand_config_with_http_info(id, expand_catlet_config_request_body, opts)
      data
    end

    # Expand catlet config
    # Expand the config for an existing catlet
    # @param id [String] 
    # @param expand_catlet_config_request_body [ExpandCatletConfigRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Operation, Integer, Hash)>] Operation data, response status code and response headers
    def catlets_expand_config_with_http_info(id, expand_catlet_config_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatletsApi.catlets_expand_config ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CatletsApi.catlets_expand_config"
      end
      # verify the required parameter 'expand_catlet_config_request_body' is set
      if @api_client.config.client_side_validation && expand_catlet_config_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'expand_catlet_config_request_body' when calling CatletsApi.catlets_expand_config"
      end
      # resource path
      local_var_path = '/v1/catlets/{id}/config/expand'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(expand_catlet_config_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'Operation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CatletsApi.catlets_expand_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatletsApi#catlets_expand_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Expand new catlet config
    # Expand the config for a new catlet
    # @param [Hash] opts the optional parameters
    # @option opts [ExpandNewCatletConfigRequest] :expand_new_catlet_config_request 
    # @return [Operation]
    def catlets_expand_new_config(opts = {})
      data, _status_code, _headers = catlets_expand_new_config_with_http_info(opts)
      data
    end

    # Expand new catlet config
    # Expand the config for a new catlet
    # @param [Hash] opts the optional parameters
    # @option opts [ExpandNewCatletConfigRequest] :expand_new_catlet_config_request 
    # @return [Array<(Operation, Integer, Hash)>] Operation data, response status code and response headers
    def catlets_expand_new_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatletsApi.catlets_expand_new_config ...'
      end
      # resource path
      local_var_path = '/v1/catlets/config/expand'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'expand_new_catlet_config_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Operation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CatletsApi.catlets_expand_new_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatletsApi#catlets_expand_new_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a catlet
    # Get a catlet
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Catlet]
    def catlets_get(id, opts = {})
      data, _status_code, _headers = catlets_get_with_http_info(id, opts)
      data
    end

    # Get a catlet
    # Get a catlet
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Catlet, Integer, Hash)>] Catlet data, response status code and response headers
    def catlets_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatletsApi.catlets_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CatletsApi.catlets_get"
      end
      # resource path
      local_var_path = '/v1/catlets/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Catlet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CatletsApi.catlets_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatletsApi#catlets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a catlet configuration
    # Get the configuration of a catlet
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CatletConfiguration]
    def catlets_get_config(id, opts = {})
      data, _status_code, _headers = catlets_get_config_with_http_info(id, opts)
      data
    end

    # Get a catlet configuration
    # Get the configuration of a catlet
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CatletConfiguration, Integer, Hash)>] CatletConfiguration data, response status code and response headers
    def catlets_get_config_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatletsApi.catlets_get_config ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CatletsApi.catlets_get_config"
      end
      # resource path
      local_var_path = '/v1/catlets/{id}/config'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CatletConfiguration'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CatletsApi.catlets_get_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatletsApi#catlets_get_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all catlets
    # List all catlets
    # @param [Hash] opts the optional parameters
    # @option opts [String] :project_id 
    # @return [CatletList]
    def catlets_list(opts = {})
      data, _status_code, _headers = catlets_list_with_http_info(opts)
      data
    end

    # List all catlets
    # List all catlets
    # @param [Hash] opts the optional parameters
    # @option opts [String] :project_id 
    # @return [Array<(CatletList, Integer, Hash)>] CatletList data, response status code and response headers
    def catlets_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatletsApi.catlets_list ...'
      end
      # resource path
      local_var_path = '/v1/catlets'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'project_id'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CatletList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CatletsApi.catlets_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatletsApi#catlets_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Populate catlet config variables
    # Populates the variables in a config for a new catlet based on the parent.
    # @param [Hash] opts the optional parameters
    # @option opts [PopulateCatletConfigVariablesRequest] :populate_catlet_config_variables_request 
    # @return [Operation]
    def catlets_populate_config_variables(opts = {})
      data, _status_code, _headers = catlets_populate_config_variables_with_http_info(opts)
      data
    end

    # Populate catlet config variables
    # Populates the variables in a config for a new catlet based on the parent.
    # @param [Hash] opts the optional parameters
    # @option opts [PopulateCatletConfigVariablesRequest] :populate_catlet_config_variables_request 
    # @return [Array<(Operation, Integer, Hash)>] Operation data, response status code and response headers
    def catlets_populate_config_variables_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatletsApi.catlets_populate_config_variables ...'
      end
      # resource path
      local_var_path = '/v1/catlets/config/populate-variables'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'populate_catlet_config_variables_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Operation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CatletsApi.catlets_populate_config_variables",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatletsApi#catlets_populate_config_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start a catlet
    # Start a catlet
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Operation]
    def catlets_start(id, opts = {})
      data, _status_code, _headers = catlets_start_with_http_info(id, opts)
      data
    end

    # Start a catlet
    # Start a catlet
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Operation, Integer, Hash)>] Operation data, response status code and response headers
    def catlets_start_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatletsApi.catlets_start ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CatletsApi.catlets_start"
      end
      # resource path
      local_var_path = '/v1/catlets/{id}/start'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Operation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CatletsApi.catlets_start",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatletsApi#catlets_start\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop a catlet
    # Stop a catlet
    # @param id [String] 
    # @param stop_catlet_request_body [StopCatletRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Operation]
    def catlets_stop(id, stop_catlet_request_body, opts = {})
      data, _status_code, _headers = catlets_stop_with_http_info(id, stop_catlet_request_body, opts)
      data
    end

    # Stop a catlet
    # Stop a catlet
    # @param id [String] 
    # @param stop_catlet_request_body [StopCatletRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Operation, Integer, Hash)>] Operation data, response status code and response headers
    def catlets_stop_with_http_info(id, stop_catlet_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatletsApi.catlets_stop ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CatletsApi.catlets_stop"
      end
      # verify the required parameter 'stop_catlet_request_body' is set
      if @api_client.config.client_side_validation && stop_catlet_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'stop_catlet_request_body' when calling CatletsApi.catlets_stop"
      end
      # resource path
      local_var_path = '/v1/catlets/{id}/stop'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(stop_catlet_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'Operation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CatletsApi.catlets_stop",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatletsApi#catlets_stop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a catlet
    # Update a catlet
    # @param id [String] 
    # @param update_catlet_request_body [UpdateCatletRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Operation]
    def catlets_update(id, update_catlet_request_body, opts = {})
      data, _status_code, _headers = catlets_update_with_http_info(id, update_catlet_request_body, opts)
      data
    end

    # Update a catlet
    # Update a catlet
    # @param id [String] 
    # @param update_catlet_request_body [UpdateCatletRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Operation, Integer, Hash)>] Operation data, response status code and response headers
    def catlets_update_with_http_info(id, update_catlet_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatletsApi.catlets_update ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CatletsApi.catlets_update"
      end
      # verify the required parameter 'update_catlet_request_body' is set
      if @api_client.config.client_side_validation && update_catlet_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'update_catlet_request_body' when calling CatletsApi.catlets_update"
      end
      # resource path
      local_var_path = '/v1/catlets/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_catlet_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'Operation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CatletsApi.catlets_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatletsApi#catlets_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate catlet config
    # Performs a quick validation of the catlet configuration
    # @param [Hash] opts the optional parameters
    # @option opts [ValidateConfigRequest] :validate_config_request 
    # @return [CatletConfigValidationResult]
    def catlets_validate_config(opts = {})
      data, _status_code, _headers = catlets_validate_config_with_http_info(opts)
      data
    end

    # Validate catlet config
    # Performs a quick validation of the catlet configuration
    # @param [Hash] opts the optional parameters
    # @option opts [ValidateConfigRequest] :validate_config_request 
    # @return [Array<(CatletConfigValidationResult, Integer, Hash)>] CatletConfigValidationResult data, response status code and response headers
    def catlets_validate_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatletsApi.catlets_validate_config ...'
      end
      # resource path
      local_var_path = '/v1/catlets/config/validate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'validate_config_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CatletConfigValidationResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"CatletsApi.catlets_validate_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatletsApi#catlets_validate_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
