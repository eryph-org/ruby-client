=begin
#Compute Api

#Compute Api

The version of the OpenAPI document: 1.0
Contact: support@dbosoft.eu
Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module ComputeClient
  class OperationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get an operation
    # Get an operation
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :log_time_stamp Filters returned log entries by the requested timestamp
    # @option opts [String] :expand Expand details. Supported details are: logs,resources,projects,tasks
    # @return [Operation]
    def operations_get(id, opts = {})
      data, _status_code, _headers = operations_get_with_http_info(id, opts)
      data
    end

    # Get an operation
    # Get an operation
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :log_time_stamp Filters returned log entries by the requested timestamp
    # @option opts [String] :expand Expand details. Supported details are: logs,resources,projects,tasks
    # @return [Array<(Operation, Integer, Hash)>] Operation data, response status code and response headers
    def operations_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OperationsApi.operations_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OperationsApi.operations_get"
      end
      # resource path
      local_var_path = '/v1/operations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'log_time_stamp'] = opts[:'log_time_stamp'] if !opts[:'log_time_stamp'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Operation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"OperationsApi.operations_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OperationsApi#operations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all operations
    # List all operations
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :log_time_stamp Filters returned log entries by the requested timestamp
    # @option opts [String] :expand Expand details. Supported details are: logs,resources,projects,tasks
    # @return [OperationList]
    def operations_list(opts = {})
      data, _status_code, _headers = operations_list_with_http_info(opts)
      data
    end

    # List all operations
    # List all operations
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :log_time_stamp Filters returned log entries by the requested timestamp
    # @option opts [String] :expand Expand details. Supported details are: logs,resources,projects,tasks
    # @return [Array<(OperationList, Integer, Hash)>] OperationList data, response status code and response headers
    def operations_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OperationsApi.operations_list ...'
      end
      # resource path
      local_var_path = '/v1/operations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'log_time_stamp'] = opts[:'log_time_stamp'] if !opts[:'log_time_stamp'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OperationList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"OperationsApi.operations_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OperationsApi#operations_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
