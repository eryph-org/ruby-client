=begin
#Compute Api

#Compute Api

The version of the OpenAPI document: 1.0
Contact: support@dbosoft.eu
Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module ComputeClient
  class VirtualNetworksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a virtual network
    # Get a virtual network
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [VirtualNetwork]
    def virtual_networks_get(id, opts = {})
      data, _status_code, _headers = virtual_networks_get_with_http_info(id, opts)
      data
    end

    # Get a virtual network
    # Get a virtual network
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VirtualNetwork, Integer, Hash)>] VirtualNetwork data, response status code and response headers
    def virtual_networks_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VirtualNetworksApi.virtual_networks_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VirtualNetworksApi.virtual_networks_get"
      end
      # resource path
      local_var_path = '/v1/virtualnetworks/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VirtualNetwork'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"VirtualNetworksApi.virtual_networks_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VirtualNetworksApi#virtual_networks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the virtual network configuration of a project
    # Get the virtual network configuration of a project
    # @param project_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [VirtualNetworkConfiguration]
    def virtual_networks_get_config(project_id, opts = {})
      data, _status_code, _headers = virtual_networks_get_config_with_http_info(project_id, opts)
      data
    end

    # Get the virtual network configuration of a project
    # Get the virtual network configuration of a project
    # @param project_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VirtualNetworkConfiguration, Integer, Hash)>] VirtualNetworkConfiguration data, response status code and response headers
    def virtual_networks_get_config_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VirtualNetworksApi.virtual_networks_get_config ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VirtualNetworksApi.virtual_networks_get_config"
      end
      # resource path
      local_var_path = '/v1/projects/{project_id}/virtualnetworks/config'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VirtualNetworkConfiguration'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"VirtualNetworksApi.virtual_networks_get_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VirtualNetworksApi#virtual_networks_get_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all virtual networks
    # List all virtual networks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :project_id 
    # @return [VirtualNetworkList]
    def virtual_networks_list(opts = {})
      data, _status_code, _headers = virtual_networks_list_with_http_info(opts)
      data
    end

    # List all virtual networks
    # List all virtual networks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :project_id 
    # @return [Array<(VirtualNetworkList, Integer, Hash)>] VirtualNetworkList data, response status code and response headers
    def virtual_networks_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VirtualNetworksApi.virtual_networks_list ...'
      end
      # resource path
      local_var_path = '/v1/virtualnetworks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'project_id'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VirtualNetworkList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"VirtualNetworksApi.virtual_networks_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VirtualNetworksApi#virtual_networks_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the virtual network configuration of a project
    # Update the virtual network configuration of a project
    # @param project_id [String] 
    # @param update_project_networks_request_body [UpdateProjectNetworksRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Operation]
    def virtual_networks_update_config(project_id, update_project_networks_request_body, opts = {})
      data, _status_code, _headers = virtual_networks_update_config_with_http_info(project_id, update_project_networks_request_body, opts)
      data
    end

    # Update the virtual network configuration of a project
    # Update the virtual network configuration of a project
    # @param project_id [String] 
    # @param update_project_networks_request_body [UpdateProjectNetworksRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Operation, Integer, Hash)>] Operation data, response status code and response headers
    def virtual_networks_update_config_with_http_info(project_id, update_project_networks_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VirtualNetworksApi.virtual_networks_update_config ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling VirtualNetworksApi.virtual_networks_update_config"
      end
      # verify the required parameter 'update_project_networks_request_body' is set
      if @api_client.config.client_side_validation && update_project_networks_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'update_project_networks_request_body' when calling VirtualNetworksApi.virtual_networks_update_config"
      end
      # resource path
      local_var_path = '/v1/projects/{project_id}/virtualnetworks/config'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_project_networks_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'Operation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"VirtualNetworksApi.virtual_networks_update_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VirtualNetworksApi#virtual_networks_update_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
