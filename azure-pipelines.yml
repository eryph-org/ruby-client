# Triggers
trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - '*.md'
    - '.changeset/**'

pr:
  branches:
    include:
    - main

# Manual trigger parameters for releases
parameters:
- name: runRelease
  displayName: 'Run Release Stage'
  type: boolean
  default: false
- name: dryRun
  displayName: 'Dry Run (test release without publishing)'
  type: boolean
  default: true

pool:
  name: eryph
  demands:
  - Agent.Name -equals vsts-agent

variables:
  RUBY_VERSION: '3.4'
  BUNDLER_VERSION: '2.4.10'
  RUBY_PATH: 'C:\Ruby34-x64\bin'

stages:
# Stage 1: Build and Test
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: TestAndBuild
    displayName: 'Test Ruby Client and Build Gems'
    
    steps:
    # Update RubyGems and install Bundler
    - script: |
        set PATH=$(RUBY_PATH);%PATH%
        gem update --system --no-document
        gem install bundler -v $(BUNDLER_VERSION) --no-document
      displayName: 'Update RubyGems and install Bundler'

    # Install dependencies
    - script: |
        set PATH=$(RUBY_PATH);%PATH%
        bundle install --jobs 4 --retry 3
      displayName: 'Bundle install'

    # Run unit tests
    - script: |
        set PATH=$(RUBY_PATH);%PATH%
        bundle exec rspec spec/unit --format progress --format RspecJunitFormatter --out test-results-unit.xml
      displayName: 'Run unit tests'
      continueOnError: true

    # Run integration tests (assuming Eryph is preinstalled)
    - script: |
        set PATH=$(RUBY_PATH);%PATH%
        set INTEGRATION_TESTS=1
        set DISABLE_COVERAGE=1
        bundle exec rspec spec/integration --format progress --format RspecJunitFormatter --out test-results-integration.xml
      displayName: 'Run integration tests'
      continueOnError: true
      env:
        INTEGRATION_TESTS: '1'
        DISABLE_COVERAGE: '1'

    # Check changeset status for PRs
    - powershell: |
        npm install -g pnpm
        npx pnpm install
        
        if ($env:BUILD_REASON -eq 'PullRequest') {
          Write-Host "Checking changeset status for PR..."
          $result = npx pnpm changeset:status
          if ($LASTEXITCODE -ne 0) {
            Write-Host "##vso[task.logissue type=error]Changeset validation failed. Please add a changeset with: pnpm changeset"
            exit 1
          }
          Write-Host "Changeset validation passed"
        } else {
          Write-Host "Skipping changeset check (not a PR build)"
        }
      displayName: 'Validate changesets for PRs'
      condition: always()

    # Install Node.js dependencies
    - powershell: |
        npm install -g pnpm
        npx pnpm install
      displayName: 'Install Node.js dependencies'

    # Build gems
    - script: |
        set PATH=$(RUBY_PATH);%PATH%
        npx pnpm build:gems
      displayName: 'Build all gems'

    # Create artifacts directory and copy gems
    - script: |
        mkdir $(Build.ArtifactStagingDirectory)\gems
        copy build\gems\*.gem $(Build.ArtifactStagingDirectory)\gems\
      displayName: 'Prepare gem artifacts'

    # Publish test results
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test-results-*.xml'
        failTaskOnFailedTests: true
        testRunTitle: 'Ruby Client Tests'
      displayName: 'Publish test results'
      condition: always()

    # Publish gem artifacts
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)\gems'
        artifactName: 'ruby-gems'
        artifactType: 'container'
      displayName: 'Publish gem artifacts'
      condition: succeeded()

    # Display build summary
    - script: |
        set PATH=$(RUBY_PATH);%PATH%
        echo "=== Build Summary ==="
        ruby --version
        bundle --version
        echo "Built gems:"
        dir build\gems\*.gem
        echo "=== End Summary ==="
      displayName: 'Build summary'
      condition: always()

# Stage 2: Release to RubyGems (Requires Manual Approval)
- stage: Release
  displayName: 'Release to RubyGems'
  condition: and(succeeded(), eq('${{ parameters.runRelease }}', true))
  variables:
  - group: rubygems-eryph # Contains RUBYGEMS_API_TOKEN
  
  jobs:
  - deployment: PublishGems
    displayName: 'Publish Gems to RubyGems.org'
    environment: 'rubygems-production'  # ‚Üê MANUAL APPROVAL REQUIRED HERE
    strategy:
      runOnce:
        deploy:
          steps:
          # Checkout with full history for changeset
          - checkout: self
            persistCredentials: true
            fetchDepth: 0
            fetchTags: true
          
          # Fix detached HEAD state for changeset
          - script: |
              echo "Checking out branch to fix detached HEAD..."
              git checkout $(Build.SourceBranchName)
              git config --global user.email "ci@eryph.io"
              git config --global user.name "Eryph CI"
            displayName: 'Fix detached HEAD and configure git'
          
          # Install Node.js dependencies and run changeset
          - powershell: |
              npm install -g pnpm
              npx pnpm install
              
              Write-Host "Current changeset status:"
              npx pnpm changeset:status
              
              Write-Host "Running changeset version to bump package versions..."
              npx pnpm changeset:version
              
              Write-Host "Git status after version bump:"
              git status
            displayName: 'Bump versions with changeset'
          
          # Set up Ruby
          - script: |
              set PATH=$(RUBY_PATH);%PATH%
              gem update --system --no-document
              gem install bundler -v $(BUNDLER_VERSION) --no-document
            displayName: 'Set up Ruby'
          
          # Install dependencies
          - script: |
              set PATH=$(RUBY_PATH);%PATH%
              bundle install --jobs 4 --retry 3
            displayName: 'Install Ruby dependencies'
          
          
          # Publish gems using existing changeset workflow
          - powershell: |
              # Set RubyGems API token from secret variable
              $env:GEM_HOST_API_KEY = "$(RUBYGEMS_API_TOKEN)"
              
              if ('${{ parameters.dryRun }}' -eq 'true') {
                Write-Host "=== DRY RUN MODE - Testing publish workflow ==="
                npx pnpm publish:gems --dry-run
              } else {
                Write-Host "=== PUBLISHING GEMS TO RUBYGEMS.ORG ==="
                npx pnpm changeset:publish
              }
            displayName: 'Publish gems to RubyGems'
            env:
              GEM_HOST_API_KEY: $(RUBYGEMS_API_TOKEN)
          
          # Commit version changes after successful publish
          - powershell: |
              if ('${{ parameters.dryRun }}' -eq 'false') {
                Write-Host "Committing version changes after successful publish..."
                
                # Re-run changeset version to get the changes in this stage
                npx pnpm changeset:version
                
                $changes = git diff --name-only
                if ($changes) {
                  git add .
                  git commit -m "Version packages [skip ci]"
                  git push origin HEAD:$(Build.SourceBranchName)
                  Write-Host "‚úÖ Version changes committed and pushed"
                } else {
                  Write-Host "‚ÑπÔ∏è  No version changes to commit"
                }
              } else {
                Write-Host "Skipping version commit (dry run mode)"
              }
            displayName: 'Commit version changes'
            condition: succeeded()
          
          # Final summary
          - powershell: |
              Write-Host "=== RELEASE SUMMARY ==="
              if ('${{ parameters.dryRun }}' -eq 'true') {
                Write-Host "‚úÖ DRY RUN COMPLETED - No gems were published"
                Write-Host "To publish for real, re-run with Dry Run = false"
              } else {
                Write-Host "üéâ RELEASE COMPLETED - Gems published to RubyGems.org"
                Write-Host "Check your gems at: https://rubygems.org/profiles/eryph"
              }
              Write-Host "=== END SUMMARY ==="
            displayName: 'Release summary'
            condition: always()