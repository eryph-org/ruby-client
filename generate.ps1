#!/usr/bin/env pwsh

<#
.SYNOPSIS
    Generates the Eryph Ruby Compute Client from OpenAPI specification
.DESCRIPTION
    This script downloads the latest OpenAPI specification from the eryph-api-spec repository
    and generates the Ruby client code using OpenAPI Generator.
.PARAMETER SpecUrl
    URL to the OpenAPI specification. Defaults to the latest from GitHub.
.PARAMETER OutputDir
    Directory where generated code will be placed. Defaults to current directory.
.PARAMETER Clean
    Remove existing generated code before generating new code.
.EXAMPLE
    .\generate.ps1
    Generates client with default settings
.EXAMPLE
    .\generate.ps1 -Clean
    Cleans existing generated code and generates fresh client
.EXAMPLE
    .\generate.ps1 -SpecUrl "https://raw.githubusercontent.com/eryph-org/eryph-api-spec/main/specification/compute/v1/swagger.json"
    Generates client from specific spec URL
#>

param(
    [string]$SpecUrl = "https://raw.githubusercontent.com/eryph-org/eryph-api-spec/main/specification/compute/v1/swagger.json",
    [string]$OutputDir = ".",
    [switch]$Clean
)

# Set error action preference
$ErrorActionPreference = "Stop"

# Configuration
$GeneratorVersion = "7.5.0"
$PackageName = "compute_client"
$GemName = "compute-client"
$GemVersion = "1.0.0"
$ClientPackage = "org.openapitools.codegen.languages.RubyClientCodegen"

# Paths
$GeneratedDir = Join-Path (Join-Path (Join-Path (Join-Path $OutputDir "lib") "eryph") "compute") "generated"
$SpecFile = Join-Path $OutputDir "swagger.json"

Write-Host "üöÄ Generating Eryph Ruby Compute Client" -ForegroundColor Green
Write-Host "Spec URL: $SpecUrl" -ForegroundColor Cyan
Write-Host "Output Directory: $OutputDir" -ForegroundColor Cyan
Write-Host "Generator Version: $GeneratorVersion" -ForegroundColor Cyan

# Clean up if requested
if ($Clean) {
    Write-Host "üßπ Cleaning existing generated code..." -ForegroundColor Yellow
    
    $pathsToClean = @(
        $GeneratedDir,
        (Join-Path $OutputDir "docs"),
        (Join-Path $OutputDir "spec"),
        $SpecFile
    )
    
    foreach ($path in $pathsToClean) {
        if (Test-Path $path) {
            Write-Host "  Removing: $path" -ForegroundColor DarkGray
            Remove-Item $path -Recurse -Force
        }
    }
}

# Create output directory structure
Write-Host "üìÅ Creating directory structure..." -ForegroundColor Yellow
$GeneratedDir | ForEach-Object {
    if (-not (Test-Path $_)) {
        New-Item -ItemType Directory -Path $_ -Force | Out-Null
        Write-Host "  Created: $_" -ForegroundColor DarkGray
    }
}

# Download OpenAPI specification
Write-Host "üì• Downloading OpenAPI specification..." -ForegroundColor Yellow
try {
    Invoke-WebRequest -Uri $SpecUrl -OutFile $SpecFile -UseBasicParsing
    Write-Host "  Downloaded to: $SpecFile" -ForegroundColor DarkGray
}
catch {
    Write-Error "Failed to download OpenAPI specification from $SpecUrl`: $($_.Exception.Message)"
    exit 1
}

# Verify OpenAPI Generator CLI is available
Write-Host "üîç Checking OpenAPI Generator CLI..." -ForegroundColor Yellow
try {
    $generatorOutput = cmd /c "npx @openapitools/openapi-generator-cli version" 2>&1
    if ($LASTEXITCODE -ne 0) {
        throw "OpenAPI Generator CLI not found or failed to run"
    }
    Write-Host "  Generator available: $generatorOutput" -ForegroundColor DarkGray
}
catch {
    Write-Error "OpenAPI Generator CLI is not available. Please install it with: npm install -g @openapitools/openapi-generator-cli"
    exit 1
}

# Generate the client
Write-Host "‚öôÔ∏è  Generating Ruby client..." -ForegroundColor Yellow

$generatorArgs = @(
    "@openapitools/openapi-generator-cli", "generate",
    "-i", $SpecFile,
    "-g", "ruby",
    "--library", "faraday",
    "-o", $GeneratedDir,
    "--package-name", $PackageName,
    "--additional-properties", "moduleName=ComputeClient"
)

Write-Host "  Running: npx $($generatorArgs -join ' ')" -ForegroundColor DarkGray

try {
    # Use cmd to run npx to avoid Win32 application issues
    $fullCommand = "npx " + ($generatorArgs -join " ")
    Write-Host "  Executing: $fullCommand" -ForegroundColor DarkGray
    
    $result = cmd /c $fullCommand
    if ($LASTEXITCODE -ne 0) {
        throw "OpenAPI Generator failed with exit code $LASTEXITCODE"
    }
    
    Write-Host "  Generation completed successfully" -ForegroundColor DarkGray
}
catch {
    Write-Error "Failed to generate Ruby client: $($_.Exception.Message)"
    exit 1
}

# Post-generation cleanup and adjustments
Write-Host "üîß Post-processing generated code..." -ForegroundColor Yellow

# Create main entry point for generated module
$entryPointContent = @"
# Generated by OpenAPI Generator: https://openapi-generator.tech
# Do not edit this file manually - it will be overwritten during regeneration

# Add the generated lib directory to the load path
`$LOAD_PATH.unshift(File.expand_path('generated/lib', __dir__))

require '$PackageName'

module Eryph
  module Generated
    # Re-export all generated classes for easier access
    include ComputeClient
    
    # Alias the main classes for backward compatibility
    NewCatletRequest = ComputeClient::NewCatletRequest
    StopCatletRequestBody = ComputeClient::StopCatletRequestBody
    CatletStopMode = ComputeClient::CatletStopMode
    ApiClient = ComputeClient::ApiClient
    Configuration = ComputeClient::Configuration
  end
  
  module Compute
    module Generated
      # Re-export the generated client classes for easier access
      Client = ComputeClient
    end
  end
end
"@

$entryPointPath = Join-Path (Join-Path (Join-Path (Join-Path $OutputDir "lib") "eryph") "compute") "generated.rb"
Set-Content -Path $entryPointPath -Value $entryPointContent -Encoding UTF8

# Clean up temporary files
if (Test-Path $SpecFile) {
    Remove-Item $SpecFile -Force
    Write-Host "  Removed temporary spec file" -ForegroundColor DarkGray
}

Write-Host "‚úÖ Code generation completed successfully!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Next steps:" -ForegroundColor Yellow
Write-Host "  1. Review generated code in: $GeneratedDir" -ForegroundColor White
Write-Host "  2. Update lib/eryph/compute/client.rb to use generated client" -ForegroundColor White
Write-Host "  3. Run tests to verify generation: bundle exec rspec" -ForegroundColor White
Write-Host "  4. Update documentation and examples as needed" -ForegroundColor White
Write-Host ""
Write-Host "üîó Generated entry point: $entryPointPath" -ForegroundColor Cyan